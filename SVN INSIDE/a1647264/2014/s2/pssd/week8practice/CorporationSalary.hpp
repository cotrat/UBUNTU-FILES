#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <string>
#include <limits>
#include <stdio.h>
#include <sstream>
using namespace std;


class CorporationSalary
{
  public:
	
	vector<long long> salaries;
	vector<string> g_relations;

	long long totalSalary(vector<string> relations)
	{
		long long total = 0;
		

		for(int l = 0; l < relations.size(); l++)
		{
			salaries.push_back(-1);
			g_relations.push_back(relations[l]);
		}
		
		for(int i = 0; i < relations.size(); i++)
		{
			//if(salaries[i] == -1)
			//{
			//	cout << "Worker " << i << endl << endl;
				total += recur(i);
				//cout << total << endl;
			//}
		}
		//total = recur(1);
		salaries.clear();
		g_relations.clear();
		return total;
	}
	
	long long recur(int worker)
	{
		long long ans = 0;
		//cout << " Called on worker " << worker << endl;
		if(salaries[worker] != -1)			// If its already been done
			return salaries[worker];
		
		bool hasSubs = 0;
		for(int j = 0; j < g_relations[worker].size(); j++)
		{
			if(g_relations[worker][j] == 'Y')	// Check which recursive calls need to be made
			{
				ans+=recur(j);
				hasSubs = 1;
			}
		}

		salaries[worker] = ans;				// Memoize
		if(!hasSubs) 
		{
			salaries[worker] = 1;
			ans = 1;
		}
		return ans;
	}
	
	
	
		       
};
 
/*int main()
{
      	CorporationSalary a;
	long long l;
	string complearr[] = 		{"NNYNYNNNYNNNNNYNNYNYNYYYNNNNNYNNNNNYYYYYYY", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "NYNNYYYNNNYNNNNNNNNYNNYNNNYNNNNNNNNNYNYNNN", "YNNNYNYNNNNNNYYYNNNNNYNYNYYYNNNYYNNNYNYYYY", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "NYNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "NNNNYNNNYNNNNNNNNNYNNNNNNNNNNYNNNNNNNNNNNN", "YNNYYYYNYYNNNNNNNNNYYNNYNNNYNNNNYYNNNNYYNY", "NYNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNN", "YYNNNYNNNNNNNYNNYYYYNNNYNNNNYNYNYYNNNYNYYN", "NNNNNYYNYNNNNNNNNNYYNNNNNNNNYNNNNNNNNNNNNN", "YNYYNNYNNNNNNYYYNNYNNNNYNNYNNNYNYYNYNNNNYY", "NYNNNNYNNNYNNNYNYNYYNYYYYNNYYYNNNYYNYNNYNY", "YNNNNNNNYNNNNNYNYYNNNNYNNNNNYYNNNYNYNYNNNN", "NNYNYYYNYNNNNNNNNYYYNNNNNNYNNYNNNNNNYNNNNN", "YYNNNYNNYNYNNYYNYYYNNYYNNYNNNNYYNYNYNYYYYY", "NYNNNYNNYNNNNNNNNNYNNNYNNYYNNYYNNYNYNNNNNN", "NYNNYYYNYNYNNNNNNNYNNNYNNNYNYNNNNYNYYNNNNN", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "NYNNYNYNYNNNNNNNNNYNNNNNNNNNNNNNNNNNYNNNNN", "NYNYYNYNNYYNNNYYYYYNNYNYNYYNYNNYNYNYYYNNYY", "NYYNYYYNYNNNNNYNYNNYNNNNNNNNNNNNNNNYYNNYNN", "NNNNNYYNYNNNNNNNNNYNNNNNNNNNNYNNNYNNNNNNNN", "NYYNYYYNNNNNNNNNNNYYNYYNNYYNYYNNNNNNYNNYYN", "NYNYYNYNNYNNNNNNNYNNNYNYNNYNYYYNNNNYYYNNYN", "NYYNNNYNYNYNNNNNNNYYNNNNNNYNYNYNNYNYNNYYNY", "NNNNYNYNYNYNNNNNNNNYNNNNNNNNYNNNNNNNYNYNNN", "YYNNYNNNNNYNNNYNNNYNNNNYNYYNNYNNYYNYNYNNNN", "NYNNNYYNNNNNNNNNNNNYNNNNNNNNNNNNNNNYYNYNNN", "NYNNYYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNN", "NNYNYYYNNNYNNNNNNNNYNNNNNNNNNYNNNYNYYNYYNY", "NNYNYYNNYNYNNNYNYNNYNYYYNYYNYYNNNYNYYNNNNY", "NYNNNNNNYNYNNYYNNYYYNYNNNNNNNYYYNYNNYNNYNN", "NYNNNYYNNNNNNNNNNNNNNNNNNNNNNYNNNNNNYNNNNN", "NYNNNNYNNNNNNNNYYNYYNYNYNNYYNNNNYNNNYNYNNY", "NYNNNNNNYNNNNNNNNNYYNNNNNNNNNYNNNNNNNNYNNN", "NYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "NYYNNNYNYNNNNNNNNYYYNNYNNYYNYNYNNYNNYNNYYN", "NYNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNN", "NNNNNYNNYNYNNNYNNYYNNNNNNNNNYNNNNNNNYNYNNN", "NNNNNNYNYNNNNNNNYNYYNNYNNYNNNYNNNYNNYNYNNN", "NYNNYNYNNNYNNNNNNNNNNNYNNNNNNYNNNNNYYNYYNN"};
	vector<string> comple(complearr,complearr + sizeof(complearr) / sizeof(string) );
	l = a.totalSalary(comple);
	cout << l;

	
}*/
