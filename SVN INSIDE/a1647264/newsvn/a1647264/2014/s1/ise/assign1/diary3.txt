Fixing the original bug that I found in the ‘Simtersection’ simulation turned out to be more complex process than I originally thought it would be. I followed quite a simple procedural method for fixing the bug. First I identified what the bug was (as indicated in the first diary entry) then I thought about possible ways to fix the bug, then I implemented the bug fix. The implementation of the fix was the most difficult part of debugging the code as it took considerable time and effort to fix the bug. I followed a kind of test driven development method, using unit validation testing to ensure that my changes worked. For example if I created a stopping area around the taxi rank, I could also create a red rectangle with the same dimensions of the created stopping area, then set a flag so that if a person stops in this area the output to console reads ‘A Person Stopped’. Through these messages along with a visual inspection I was able to verify that this fix had worked. A major difficulty was the lack (or rather complete absence of) ‘test cases’ available. In a system such as ‘Simtersection’ it is hard to write test cases because a lot of what is happening is randomized. This means that even if you set a stopping area that covers half the lane it is conceivable that no pedestrians will spawn in the right y-axis range to stop in this area (although highly unlikely). This obstacle can be overcome in two ways, either by running the program multiple times, each time for a long interval (more than 10 minutes of actual simulation time) or by removing the random nation of the simulation in favour of static variables. 
I feel my approach to bug fixing and testing was less than ideal. This was due to a combination of being new to the process of debugging and testing a large program and not being able to set definitive test cases. Having previously only worked on programs with expected inputs, (e.g. a function that reverses a string), it is easy to develop test cases and check that these tests have passed. With a randomized simulation tests must be more ‘smart’ in order to test bug fixes. The easiest way for me to test these was run incremental unit tests as changes were made in order to ensure a fix was working correctly before moving on, this is an important task as most fixes are heavily related and often one fix cannot be made without making the prerequisite fixes.

One major thing that I would change in my bug fixing, specifically related to Java would be to develop jUnit tests. Java provides a powerful framework for performing unit tests. With these jUnit tests I could create my own ‘Roads’ and ‘Intersections’ that were defined exactly as I wanted them to be, eliminating the random nature of the simulation and making testing easier.

