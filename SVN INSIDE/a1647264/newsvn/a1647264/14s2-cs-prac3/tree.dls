;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;       Tree    Binary tree routines                                         ;
;                                                                            ;
;       written Mitchell Anderson 25-oct-14                                  ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	.import put
	.import heapGet
	.import intToStr
	.import strPut


	.export tNode
	.export tInsert
	.export tPrint
	.export tRev

;	Offsets to fields of the node

bstValue .equ	0		;Node value
bstLeft	 .equ	4		;->leftChild
bstRight .equ	8		;->rightChild
bstSize	.equ	12


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                             ;
;       tNode   Create a new tree node                                        ;
;                                                                             ;
;               Initialises the node with the given node value, and sets      ;
;               pointers to subtrees to NULL                                  ;
;                                                                             ;
;       Entry   0(sp)=Number                                                  ;
;               jal tNode                                                     ;
;                                                                             ;
;       Result  r1= ->newNode                                                 ;
;                                                                             ;
;       Uses    r1,r2                                                         ;
;                                                                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.seg Code

tNodeR31	.equ -8		; offset to R31
tNodeSz		.equ 8

tNode
	sw	-4(r14),r30			; Create the stack frame (we need to store r31 at least)
	addu	r30,r14,r0
	subui	r14,r14,tNodeSz
	sw	tNodeR31(r30),r31

	addui 	r1,r0,bstSize			; Get 12 bytes from heap
	jal	heapGet				; r1 -> newNode

	lw	r2,0(r30)			; Get the value
	
	sw	bstValue(r1),r2			; Store the values
	sw	bstLeft(r1),r0
	sw	bstRight(r1),r0
				
	lw	r31,tNodeR31(r30)		; restore 31
	addu	r14,r30,r0			; Destroy the stack frame
	lw	r30,-4(r14)
	jr	r31
	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;       tInsert Insert a node into a binary tree                             ;
;                                                                            ;
;       Entry   0(r14)= ->Root of the binary tree                            ;
;               4(r14)= Number to be inserted into the tree                  ; 
;               jal insert                                                   ;
;                                                                            ;
;       Exit    r1= ->Pointer to the (new) root of the binary tree           ;
;                                                                            ;
;       Uses    r1,r2                                                        ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
tInsSz	.equ 20
tInsR31	.equ -8
tInsR3	.equ -12
	.seg	Code

tInsert	sw	-4(r14),r30
	addu	r30,r0,r14
	subui	r14,r14,tInsSz
	
	sw	tInsR31(r30),r31
	sw	tInsR3(r30),r3

	; Empty Tree

	lw	r1,0(r30)		; r1 -> node
	bnez	r1,tInsL		; if node empty

	lw	r1,4(r30)		; Load param for tNode
	sw	0(r14),r1
	jal	tNode			; r1:= ->root
	j	tInsFin

	; Add to left
	
tInsL	add	r3,r0,r1		; r3 -> Node
	lw	r1,4(r30)		; r1 = value to be inserted
	lw	r2,bstValue(r3)		; r2 = value of root
	sle	r2,r1,r2		; if val < root
	beqz	r2,tInsR
		
	
	lw	r2,bstLeft(r3)
	sw	0(r14),r2
	sw	4(r14),r1

	jal	tInsert
	sw	bstLeft(r3),r1

	add	r1,r0,r3
	j	tInsFin

	; Add to right

tInsR	lw	r2,bstRight(r3)		
	sw	0(r14),r2		
	sw	4(r14),r1

	jal	tInsert			; r1 -> new root of right subtree
	sw	bstRight(r3),r1
	add	r1,r0,r3


tInsFin	lw	r3,tInsR3(r30)
	lw	r31,tInsR31(r30)
	
	addu	r14,r30,r0
	lw	r30,-4(r14)
	jr	r31				
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;       tPrint  Print the structure of a binary tree                         ;
;                                                                            ;
;       Entry   0(r14)= ->rootNode of a tree                                 ;
;               jal tPrint                                                   ;
;                                                                            ;
;       Uses    r1,r2                                                        ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	.seg Code

currNode	.equ -8
;tPrintR2	.equ -12
tPrintR31	.equ -16
tPrintSS	.equ -32			; Space for the new string

tPrintSz	.equ 32

tPrint	sw	-4(r14),r30			; Create the stack frame (we need to store r31 at least)
	addu	r30,r14,r0
	subui	r14,r14,tPrintSz
	;sw	tPrintR2(r30),r2
	sw	tPrintR31(r30),r31
	
	lw	r1,0(r30)
	beqz	r1,prEmpt

	addui	r1,r0,"("			; Print left brace
	jal	put

	lw	r1,0(r30)			; Get the node
	sw	currNode(r30),r1		; store the current node in the stack frame

	addui	r1,r1,bstLeft			; 
	lw	r2,(r1)				; r2->root.left
	beqz	r2,printMid			; if NULL skip
	;subui	r14,r14,4			; Push onto stack
	sw	0(r14),r2			; 0(r14) -> Root.left
	jal	tPrint				; tPrint(root.left)

printMid
	lw	r1,currNode(r30)		; Get the root node
	lw	r1,(r1)				; Get actual value of r1
	


	add	r2,r0,r30			; Get freemem for intToStr
	addi	r2,r2,tPrintSS

	jal	intToStr

	add	r1,r0,r30			; Go back to start of stringMem block
	addi	r1,r1,tPrintSS

	jal	strPut

	lw	r1,currNode(r30)		; r1->root
	addui	r1,r1,bstRight			; r1->root.right
	lw	r2,(r1)				; 
	beqz	r2,prDone			; if NULL skip
	;subui	r14,r14,4			; Push onto stack
	sw	0(r14),r2			; 0(r14) -> Root.left
	jal	tPrint				; tPrint(root.left)
	
prDone	addui	r1,r0,")"			; Print right brace
	jal	put

prEmpt	;lw	r2,tPrintR2(r30)
	lw	r31,tPrintR31(r30)
	addu	r14,r30,r0			; Destroy the stack frame
	lw	r30,-4(r14)
	jr	r31


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;       tRev    Reverse the order of nodes in a tree                         ;
;                                                                            ;
;       Entry   0(r14)= ->rootNode of a tree                                 ;
;               jal tRev                                                     ;
;                                                                            ;
;       Uses    r1,r2                                                        ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

tRevSz	.equ 16
tRevR31	.equ -8
tRevR3	.equ -12

	.seg	Code

tRev	sw	-4(r14),r30			; Create Stack frame
	addu	r30,r0,r14
	subui	r14,r14,tRevSz
	
	sw	tRevR31(r30),r31		; Save registers
	sw	tRevR3(r30),r3

	lw	r1,0(r30)			; If empty print nothing
	beqz	r1,tRevFin

	add	r3,r0,r1			; r3->root
	lw	r2,bstLeft(r3)			; r2 -> root.left
	lw	r1,bstRight(r3)			; r1 -> root.right
	
	sw	bstLeft(r3),r1			; switch the ptrs
	sw	bstRight(r3),r2

	lw	r1,bstRight(r3)			; load in right ptr and call
	sw	0(r14),r1
	jal	tRev


	lw	r1,bstLeft(r3)			; Load in left ptr and call
	sw	0(r14),r1
	jal	tRev




tRevFin	lw	r3,tRevR3(r30)			; Restore Registers
	lw	r31,tRevR31(r30)
	
	addu	r14,r30,r0
	lw	r30,-4(r14)
	jr	r31			



